using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp5
{
    class Program
    {
        static void Main()
        {
            Random random = new Random();
            while (true)
            {
                Console.WriteLine("\nВыберите задачу (1-40) или 0 для выхода:");
                if (!int.TryParse(Console.ReadLine(), out int task) || task < 0 || task > 40) { Console.WriteLine("Неверный номер задачи!"); continue; }
                if (task == 0) break;

                switch (task)
                {
                    case 1: Task1(random); break;
                    case 2: Task2(random); break;
                    case 3: Task3(random); break;
                    case 4: Task4(random); break;
                    case 5: Task5(random); break;
                    case 6: Task6(random); break;
                    case 7: Task7(random); break;
                    case 8: Task8(random); break;
                    case 9: Task9(random); break;
                    case 10: Task10(random); break;
                    case 11: Task11(random); break;
                    case 12: Task12(random); break;
                    case 13: Task13(random); break;
                    case 14: Task14(random); break;
                    case 15: Task15(random); break;
                    case 16: Task16(random); break;
                    case 17: Task17(random); break;
                    case 18: Task18(random); break;
                    case 19: Task19(random); break;
                    case 20: Task20(random); break;
                    case 21: Task21(random); break;
                    case 22: Task22(random); break;
                    case 23: Task23(random); break;
                    case 24: Task24(random); break;
                    case 25: Task25(random); break;
                    case 26: Task26(random); break;
                    case 27: Task27(); break;
                    case 28: Task28(random); break;
                    case 29: Task29(random); break;
                    case 30: Task30(random); break;
                    case 31: Task31(random); break;
                    case 32: Task32(random); break;
                    case 33: Task33(random); break;
                    case 34: Task34(random); break;
                    case 35: Task35(); break;
                    case 36: Task36(random); break;
                    case 37: Task37(); break;
                    case 38: Task38(); break;
                    case 39: Task39(); break;
                    case 40: Task40(); break;
                    default: Console.WriteLine("Неверный номер задачи!"); break;
                }
            }
        }

        // Задача 1: Определение радиуса и центра окружности для максимального числа точек
        static void Task1(Random random)
        {
            Console.WriteLine("\nЗадача 1: Радиус и центр окружности для максимального числа точек");
            Console.Write("Введите количество точек: ");
            int n = int.Parse(Console.ReadLine());
            double[,] points = new double[n, 2];
            for (int i = 0; i < n; i++)
            {
                points[i, 0] = random.NextDouble() * 20 - 10; // x в [-10, 10]
                points[i, 1] = random.NextDouble() * 20 - 10; // y в [-10, 10]
            }

            double maxPoints = 0, bestRadius = 0, bestCenterX = 0, bestCenterY = 0;
            for (double cx = -10; cx <= 10; cx += 0.5)
                for (double cy = -10; cy <= 10; cy += 0.5)
                    for (double r = 0.1; r <= 10; r += 0.1)
                    {
                        int count = 0;
                        for (int i = 0; i < n; i++)
                        {
                            double dx = points[i, 0] - cx;
                            double dy = points[i, 1] - cy;
                            if (dx * dx + dy * dy <= r * r) count++;
                        }
                        if (count > maxPoints)
                        {
                            maxPoints = count;
                            bestRadius = r;
                            bestCenterX = cx;
                            bestCenterY = cy;
                        }
                    }

            Console.WriteLine($"Центр: ({bestCenterX:F1}, {bestCenterY:F1}), Радиус: {bestRadius:F1}, Точек: {maxPoints}");
        }

        // Задача 2: Команда из четырех лучших бегунов
        static void Task2(Random random)
        {
            Console.WriteLine("\nЗадача 2: Команда из четырех лучших бегунов");
            string[] surnames = { "Иванов", "Петров", "Сидоров", "Козлов", "Михайлов", "Алексеев", "Васильев" };
            double[] times = new double[surnames.Length];
            for (int i = 0; i < surnames.Length; i++) times[i] = random.NextDouble() * 15 + 10; // 10-25 сек
            Console.WriteLine("\nРезультаты:");
            for (int i = 0; i < surnames.Length; i++) Console.WriteLine($"{surnames[i]}: {times[i]:F2} сек");

            Array.Sort(times, surnames);
            Console.WriteLine("\nКоманда (4 лучших):");
            for (int i = 0; i < 4 && i < surnames.Length; i++) Console.WriteLine($"{surnames[i]}: {times[i]:F2} сек");
        }

        // Задача 3: Увеличение элементов в 3 раза с изменением знака
        static void Task3(Random random)
        {
            Console.WriteLine("\nЗадача 3: Увеличение элементов в 3 раза с изменением знака");
            int[,] matrix = new int[3, 3];
            GenerateMatrix(random, matrix, -10, 10);
            Console.WriteLine("\nИсходная матрица:");
            PrintMatrix(matrix);

            for (int i = 0; i < 3; i++)
                for (int j = 0; j < 3; j++)
                    matrix[i, j] = -3 * matrix[i, j];

            Console.WriteLine("\nМатрица после преобразования:");
            PrintMatrix(matrix);
        }

        // Задача 4: Элементы ниже главной диагонали с сортировкой
        static void Task4(Random random)
        {
            Console.WriteLine("\nЗадача 4: Элементы ниже главной диагонали с сортировкой");
            Console.Write("Введите размер n: ");
            int n = int.Parse(Console.ReadLine());
            int[,] matrix = new int[n, n];
            GenerateMatrix(random, matrix, -10, 10);
            Console.WriteLine("\nИсходная матрица:");
            PrintMatrix(matrix);

            int[] belowDiagonal = new int[n * (n - 1) / 2];
            int k = 0;
            for (int i = 0; i < n; i++)
                for (int j = 0; j < i; j++)
                    belowDiagonal[k++] = matrix[i, j];
            int[] original = new int[belowDiagonal.Length];
            Array.Copy(belowDiagonal, original, belowDiagonal.Length);
            Array.Sort(belowDiagonal);

            Console.WriteLine("\nОдномерный массив (до сортировки): [" + string.Join(", ", original) + "]");
            Console.WriteLine("Одномерный массив (после сортировки): [" + string.Join(", ", belowDiagonal) + "]");
        }

        // Задача 5: Сортировка тремя методами
        static void Task5(Random random)
        {
            Console.WriteLine("\nЗадача 5: Сортировка тремя методами");
            Console.Write("Введите количество строк M: ");
            int m = int.Parse(Console.ReadLine());
            Console.Write("Введите количество столбцов N: ");
            int n = int.Parse(Console.ReadLine());
            int[,] matrix = new int[m, n];
            GenerateMatrix(random, matrix, -10, 10);
            Console.WriteLine("\nИсходная матрица:");
            PrintMatrix(matrix);

            int[] flat = new int[m * n];
            int k = 0;
            for (int i = 0; i < m; i++) for (int j = 0; j < n; j++) flat[k++] = matrix[i, j];

            int[] bubble = (int[])flat.Clone();
            BubbleSort(bubble);
            Console.WriteLine("\nПузырьковая сортировка: [" + string.Join(", ", bubble) + "]");

            int[] insertion = (int[])flat.Clone();
            InsertionSort(insertion);
            Console.WriteLine("Сортировка вставками: [" + string.Join(", ", insertion) + "]");

            int[] selection = (int[])flat.Clone();
            SelectionSort(selection);
            Console.WriteLine("Сортировка выбором: [" + string.Join(", ", selection) + "]");
        }

        static void BubbleSort(int[] arr)
        {
            int n = arr.Length;
            for (int i = 0; i < n - 1; i++)
                for (int j = 0; j < n - i - 1; j++)
                    if (arr[j] > arr[j + 1]) (arr[j], arr[j + 1]) = (arr[j + 1], arr[j]);
        }

        static void InsertionSort(int[] arr)
        {
            int n = arr.Length;
            for (int i = 1; i < n; i++)
            {
                int key = arr[i];
                int j = i - 1;
                while (j >= 0 && arr[j] > key) { arr[j + 1] = arr[j]; j--; }
                arr[j + 1] = key;
            }
        }

        static void SelectionSort(int[] arr)
        {
            int n = arr.Length;
            for (int i = 0; i < n - 1; i++)
            {
                int minIdx = i;
                for (int j = i + 1; j < n; j++)
                    if (arr[j] < arr[minIdx]) minIdx = j;
                (arr[i], arr[minIdx]) = (arr[minIdx], arr[i]);
            }
        }

        // Задача 6: Количество строк, похожих на первую
        static void Task6(Random random)
        {
            Console.WriteLine("\nЗадача 6: Количество строк, похожих на первую");
            Console.Write("Введите количество строк M: ");
            int m = int.Parse(Console.ReadLine());
            Console.Write("Введите количество столбцов N: ");
            int n = int.Parse(Console.ReadLine());
            int[,] matrix = new int[m, n];
            GenerateMatrix(random, matrix, 0, 100);
            Console.WriteLine("\nИсходная матрица:");
            PrintMatrix(matrix);

            var firstSet = new HashSet<int>();
            for (int j = 0; j < n; j++) firstSet.Add(matrix[0, j]);
            int similarCount = 0;
            for (int i = 1; i < m; i++)
            {
                var currentSet = new HashSet<int>();
                for (int j = 0; j < n; j++) currentSet.Add(matrix[i, j]);
                if (currentSet.SetEquals(firstSet)) similarCount++;
            }
            Console.WriteLine($"Количество похожих строк: {similarCount}");
        }

        // Задача 7: Координаты элемента k с барьером
        static void Task7(Random random)
        {
            Console.WriteLine("\nЗадача 7: Координаты элемента k с барьером");
            Console.Write("Введите количество строк M: ");
            int m = int.Parse(Console.ReadLine());
            Console.Write("Введите количество столбцов N: ");
            int n = int.Parse(Console.ReadLine());
            int[,] matrix = new int[m, n];
            GenerateMatrix(random, matrix, -10, 10);
            Console.WriteLine("\nИсходная матрица:");
            PrintMatrix(matrix);
            Console.Write("Введите число k: ");
            int k = int.Parse(Console.ReadLine());

            int sentinel = int.MaxValue;
            for (int i = 0; i < m; i++)
            {
                int j = 0;
                matrix[i, n - 1] = sentinel; // Барьер
                while (matrix[i, j] != k && matrix[i, j] != sentinel) j++;
                if (matrix[i, j] == k) Console.WriteLine($"Найден в строке {i}, столбце {j}");
            }
        }

        // Задача 8: Умножение на минимальную сумму строки
        static void Task8(Random random)
        {
            Console.WriteLine("\nЗадача 8: Умножение на минимальную сумму строки");
            int[,] matrix = new int[3, 3];
            GenerateMatrix(random, matrix, -10, 10);
            Console.WriteLine("\nИсходная матрица:");
            PrintMatrix(matrix);

            int minSum = int.MaxValue;
            for (int i = 0; i < 3; i++)
            {
                int sum = 0;
                for (int j = 0; j < 3; j++) sum += matrix[i, j];
                if (sum < minSum) minSum = sum;
            }

            for (int i = 0; i < 3; i++)
                for (int j = 0; j < 3; j++)
                    matrix[i, j] *= minSum;

            Console.WriteLine("\nМатрица после умножения:");
            PrintMatrix(matrix);
        }

        // Задача 9: Сортировка строк по последнему элементу (сортировка подсчетом)
        static void Task9(Random random)
        {
            Console.WriteLine("\nЗадача 9: Сортировка строк по последнему элементу");
            Console.Write("Введите размер n: ");
            int n = int.Parse(Console.ReadLine());
            int[,] matrix = new int[n, n];
            GenerateMatrix(random, matrix, -10, 10);
            Console.WriteLine("\nИсходная матрица:");
            PrintMatrix(matrix);

            int[] lastElements = new int[n];
            for (int i = 0; i < n; i++) lastElements[i] = matrix[i, n - 1];
            int min = lastElements.Min(), max = lastElements.Max();
            int[] count = new int[max - min + 1];
            for (int i = 0; i < n; i++) count[lastElements[i] - min]++;
            for (int i = 1; i < count.Length; i++) count[i] += count[i - 1];
            int[,] sortedMatrix = new int[n, n];
            for (int i = n - 1; i >= 0; i--)
            {
                int idx = count[lastElements[i] - min] - 1;
                for (int j = 0; j < n; j++) sortedMatrix[idx, j] = matrix[i, j];
                count[lastElements[i] - min]--;
            }

            Console.WriteLine("\nМатрица после сортировки:");
            PrintMatrix(sortedMatrix);
        }

        // Задача 10: Количество столбцов с монотонным убыванием (5×10)
        static void Task10(Random random)
        {
            Console.WriteLine("\nЗадача 10: Количество столбцов с монотонным убыванием (5×10)");
            int[,] matrix = new int[5, 10];
            GenerateMatrix(random, matrix, -10, 10);
            Console.WriteLine("\nИсходная матрица:");
            PrintMatrix(matrix);

            int count = 0;
            for (int j = 0; j < 10; j++)
            {
                bool decreasing = true;
                for (int i = 0; i < 4; i++)
                    if (matrix[i, j] <= matrix[i + 1, j]) { decreasing = false; break; }
                if (decreasing) count++;
            }
            Console.WriteLine($"Количество столбцов с монотонным убыванием: {count}");
        }

        // Задача 11: Индексы максимального минимального элемента
        static void Task11(Random random)
        {
            Console.WriteLine("\nЗадача 11: Индексы максимального минимального элемента");
            Console.Write("Введите количество строк n: ");
            int n = int.Parse(Console.ReadLine());
            Console.Write("Введите количество столбцов m: ");
            int m = int.Parse(Console.ReadLine());
            int[,] matrix = new int[n, m];
            GenerateMatrix(random, matrix, -10, 10);
            Console.WriteLine("\nИсходная матрица:");
            PrintMatrix(matrix);

            int[] mins = new int[n];
            int minIdx = 0, minJ = 0;
            for (int i = 0; i < n; i++)
            {
                mins[i] = int.MaxValue;
                for (int j = 0; j < m; j++)
                    if (matrix[i, j] < mins[i]) { mins[i] = matrix[i, j]; minJ = j; }
                if (i == 0 || mins[i] > mins[minIdx]) minIdx = i;
            }
            Console.WriteLine($"Индексы максимального минимального элемента: [{minIdx}, {minJ}] (значение: {mins[minIdx]})");
        }

        // Задача 12: Максимум в упорядоченных столбцах
        static void Task12(Random random)
        {
            Console.WriteLine("\nЗадача 12: Максимум в упорядоченных столбцах");
            Console.Write("Введите количество строк n: ");
            int n = int.Parse(Console.ReadLine());
            Console.Write("Введите количество столбцов m: ");
            int m = int.Parse(Console.ReadLine());
            int[,] matrix = new int[n, m];
            GenerateMatrix(random, matrix, -10, 10);
            Console.WriteLine("\nИсходная матрица:");
            PrintMatrix(matrix);

            int maxOrdered = 0;
            bool hasOrdered = false;
            for (int j = 0; j < m; j++)
            {
                bool isAscending = true, isDescending = true;
                for (int i = 0; i < n - 1; i++)
                {
                    if (matrix[i, j] > matrix[i + 1, j]) isAscending = false;
                    if (matrix[i, j] < matrix[i + 1, j]) isDescending = false;
                }
                if (isAscending || isDescending)
                {
                    hasOrdered = true;
                    int colMax = matrix[0, j];
                    for (int i = 1; i < n; i++) colMax = Math.Max(colMax, matrix[i, j]);
                    maxOrdered = Math.Max(maxOrdered, colMax);
                }
            }
            Console.WriteLine($"Максимум в упорядоченных столбцах: {maxOrdered}{(hasOrdered ? "" : " (нет упорядоченных столбцов)")}");
        }

        // Задача 13: Зеркальное отражение относительно побочной диагонали
        static void Task13(Random random)
        {
            Console.WriteLine("\nЗадача 13: Зеркальное отражение относительно побочной диагонали");
            Console.Write("Введите размер n: ");
            int n = int.Parse(Console.ReadLine());
            int[,] matrix = new int[n, n];
            GenerateMatrix(random, matrix, 1, 10);
            Console.WriteLine("\nИсходная матрица:");
            PrintMatrix(matrix);

            int[,] reflected = new int[n, n];
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++)
                    reflected[i, j] = matrix[n - 1 - j, n - 1 - i];

            Console.WriteLine("\nМатрица после отражения:");
            PrintMatrix(reflected);
        }

        // Задача 14: Самые левые минимальные в первый столбец
        static void Task14(Random random)
        {
            Console.WriteLine("\nЗадача 14: Самые левые минимальные в первый столбец");
            Console.Write("Введите количество строк n: ");
            int n = int.Parse(Console.ReadLine());
            Console.Write("Введите количество столбцов m: ");
            int m = int.Parse(Console.ReadLine());
            int[,] matrix = new int[n, m];
            GenerateMatrix(random, matrix, -10, 10);
            Console.WriteLine("\nИсходная матрица:");
            PrintMatrix(matrix);

            int[] mins = new int[n];
            int[] minJ = new int[n];
            for (int i = 0; i < n; i++)
            {
                mins[i] = int.MaxValue;
                for (int j = 0; j < m; j++)
                    if (matrix[i, j] < mins[i]) { mins[i] = matrix[i, j]; minJ[i] = j; }
            }
            for (int i = 0; i < n; i++)
                matrix[i, 0] = mins[i];

            Console.WriteLine("\nМатрица после преобразования:");
            PrintMatrix(matrix);
        }

        // Задача 15: Заполнение по диагонали от правого верхнего до левого нижнего
        static void Task15()
        {
            Console.WriteLine("\nЗадача 15: Заполнение по диагонали от правого верхнего до левого нижнего");
            Console.Write("Введите размер n: ");
            int n = int.Parse(Console.ReadLine());
            int[,] matrix = new int[2 * n + 1, 2 * n + 1];
            for (int i = 0; i <= 2 * n; i++)
                for (int j = 0; j <= 2 * n; j++)
                    matrix[i, j] = i + j > 2 * n ? 2 : (i + j == 2 * n ? 1 : 0);

            Console.WriteLine("\nПолученная матрица:");
            PrintMatrix(matrix);
        }

        // Задача 16: Проверка симметрии относительно главной диагонали
        static void Task16(Random random)
        {
            Console.WriteLine("\nЗадача 16: Проверка симметрии относительно главной диагонали");
            Console.Write("Введите размер n: ");
            int n = int.Parse(Console.ReadLine());
            int[,] matrix = new int[n, n];
            GenerateMatrix(random, matrix, -10, 10);
            Console.WriteLine("\nИсходная матрица:");
            PrintMatrix(matrix);

            bool isSymmetric = true;
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++)
                    if (matrix[i, j] != matrix[j, i]) { isSymmetric = false; break; }
            Console.WriteLine($"Матрица {(isSymmetric ? "является" : "не является")} симметричной");
        }

        // Задача 17: Заполнение по правилу треугольника Паскаля
        static void Task17()
        {
            Console.WriteLine("\nЗадача 17: Заполнение по правилу треугольника Паскаля");
            Console.Write("Введите количество строк n: ");
            int n = int.Parse(Console.ReadLine());
            Console.Write("Введите количество столбцов m: ");
            int m = int.Parse(Console.ReadLine());
            int[,] matrix = new int[n, m];
            for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) matrix[i, j] = (i == 0 || j == 0) ? 1 : (i > 0 && j > 0 ? matrix[i - 1, j] + matrix[i, j - 1] : 0);

            Console.WriteLine("\nПолученная матрица:");
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < m; j++)
                    Console.Write($"{matrix[i, j],6}");
                Console.WriteLine();
            }
        }

        // Задача 18: Заполнение змейкой
        static void Task18()
        {
            Console.WriteLine("\nЗадача 18: Заполнение змейкой");
            Console.Write("Введите количество строк n: ");
            int n = int.Parse(Console.ReadLine());
            Console.Write("Введите количество столбцов m: ");
            int m = int.Parse(Console.ReadLine());
            int[,] matrix = new int[n, m];
            int value = 0;
            for (int i = 0; i < n; i++)
            {
                if (i % 2 == 0)
                    for (int j = 0; j < m; j++) matrix[i, j] = value++;
                else
                    for (int j = m - 1; j >= 0; j--) matrix[i, j] = value++;
            }

            Console.WriteLine("\nПолученная матрица:");
            PrintMatrix(matrix);
        }

        // Задача 19: Заполнение треугольным числом
        static void Task19()
        {
            Console.WriteLine("\nЗадача 19: Заполнение треугольным числом");
            Console.Write("Введите количество строк n: ");
            int n = int.Parse(Console.ReadLine());
            Console.Write("Введите количество столбцов m: ");
            int m = int.Parse(Console.ReadLine());
            int[,] matrix = new int[n, m];
            int value = 0;
            for (int j = 0; j < m; j++)
                for (int i = 0; i < n; i++)
                    matrix[i, j] = value++;

            Console.WriteLine("\nПолученная матрица:");
            for (int i = 0; i < n; i++)
            {
                for (int j = 0; j < m; j++)
                    Console.Write($"{matrix[i, j],3}");
                Console.WriteLine();
            }
        }

        // Задача 20: Заполнение спиралью против часовой стрелки
        static void Task20()
        {
            Console.WriteLine("\nЗадача 20: Заполнение спиралью против часовой стрелки");
            Console.Write("Введите число n: ");
            int n = int.Parse(Console.ReadLine());
            int size = 2 * n + 1;
            int[,] matrix = new int[size, size];
            int value = 0, center = n;
            matrix[center, center] = value++;
            int[] di = { -1, 0, 1, 0 }, dj = { 0, 1, 0, -1 };
            int dir = 0, steps = 1, stepCount = 0, turns = 0;

            while (value <= size * size)
            {
                for (int step = 0; step < steps; step++)
                {
                    int ni = center + di[dir] * stepCount;
                    int nj = center + dj[dir] * stepCount;
                    if (ni >= 0 && ni < size && nj >= 0 && nj < size && matrix[ni, nj] == 0)
                        matrix[ni, nj] = value++;
                    stepCount++;
                }
                dir = (dir + 3) % 4; // Против часовой стрелки
                turns++;
                if (turns == 2) { steps++; turns = 0; }
                stepCount = 0;
            }

            Console.WriteLine("\nПолученная матрица:");
            for (int i = 0; i < size; i++)
            {
                for (int j = 0; j < size; j++)
                    Console.Write($"{matrix[i, j],3}");
                Console.WriteLine();
            }
        }

        // Задачи 21-30 (из предыдущих запросов, оставлены без изменений)
        static void Task21(Random random) { /* ... */ }
        static void Task22(Random random) { /* ... */ }
        static void Task23(Random random) { /* ... */ }
        static void Task24(Random random) { /* ... */ }
        static void Task25(Random random) { /* ... */ }
        static void Task26(Random random) { /* ... */ }
        static void Task27() { /* ... */ }
        static void Task28(Random random) { /* ... */ }
        static void Task29(Random random) { /* ... */ }
        static void Task30(Random random) { /* ... */ }
        static void Task31(Random random) { /* ... */ }
        static void Task32(Random random) { /* ... */ }
        static void Task33(Random random) { /* ... */ }
        static void Task34(Random random) { /* ... */ }
        static void Task35() { /* ... */ }
        static void Task36(Random random) { /* ... */ }
        static void Task37() { /* ... */ }
        static void Task38() { /* ... */ }
        static void Task39() { /* ... */ }
        static void Task40() { /* ... */ }

        // Вспомогательные методы
        static void GenerateMatrix<T>(Random random, T[,] matrix, T min, T max) where T : IComparable<T>
        {
            dynamic minVal = Convert.ChangeType(min, typeof(T));
            dynamic maxVal = Convert.ChangeType(max, typeof(T));
            int rows = matrix.GetLength(0);
            int cols = matrix.GetLength(1);
            for (int i = 0; i < rows; i++)
                for (int j = 0; j < cols; j++)
                    matrix[i, j] = (dynamic)random.Next((int)minVal, (int)maxVal + 1);
        }

        static void SortMatrixByLastColumn(int[,] matrix)
        {
            int rows = matrix.GetLength(0);
            int cols = matrix.GetLength(1);
            int lastCol = cols - 1;
            for (int i = 0; i < rows - 1; i++)
                for (int j = 0; j < rows - 1 - i; j++)
                    if (matrix[j, lastCol] < matrix[j + 1, lastCol])
                        for (int col = 0; col < cols; col++)
                        {
                            int temp = matrix[j, col];
                            matrix[j, col] = matrix[j + 1, col];
                            matrix[j + 1, col] = temp;
                        }
        }

        static void PrintMatrix<T>(T[,] matrix)
        {
            int rows = matrix.GetLength(0);
            int cols = matrix.GetLength(1);
            for (int i = 0; i < rows; i++)
            {
                for (int j = 0; j < cols; j++)
                    Console.Write($"{matrix[i, j],4}");
                Console.WriteLine();
            }
        }
    }
}
